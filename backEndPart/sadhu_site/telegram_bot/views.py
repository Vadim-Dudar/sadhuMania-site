# telegram_bot/views.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from asgiref.sync import sync_to_async


async def is_allowed_user(chat_id):
    from admin_panel.models import SystemUser  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –º–æ–¥–µ–ª—å

    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ
    user_exists = await sync_to_async(SystemUser.objects.filter(user_id=chat_id).exists)()
    if user_exists:
        user = await sync_to_async(SystemUser.objects.get)(user_id=chat_id)
        return user

    return False



# –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await is_allowed_user(update.effective_user.id):
        await update.message.reply_text(f"–ü—Ä–∏–≤—ñ—Ç {update.effective_user.first_name}! –¢–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π—à–æ–≤ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —ñ –º–∞—î—à –¥–æ—Å—Ç—É–ø –¥–æ –±–æ—Ç–∞! ü•≥")
    else:
        await update.message.reply_text(f"–ü—Ä–∏–≤—ñ—Ç {update.effective_user.first_name}! –¢–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —É —Å–∏—Å—Ç–µ–º—ñ SadhuMania. –î–ª—è —Ç–æ–≥–æ —â–æ–± —Ç–µ–±–µ –¥–æ–¥–∞–ª–∏ –ø–µ—Ä–µ–¥–∞–π –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∏–∂—á–µ:")
        await update.message.reply_text(f"{update.effective_user.full_name}: {update.effective_user.id}", parse_mode='MarkdownV2')

async def manager(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from products.models import Order
    if await is_allowed_user(update.effective_user.id):
        for order in await sync_to_async(list)(Order.objects.filter(sent=False, manager=True)):
            message = (
                f"<b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order.id} '{order.product}'</b>\n\n"
                f"–Ü–º'—è: {order.name} {order.surname}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
                f"–í—ñ–¥—ñ–ª–µ–Ω–Ω—è: {order.address} {order.post}\n"
                f"–°—É–º–∞: {order.price} –≥—Ä–Ω\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
                f"{'‚≠ï –ú–µ–Ω–µ–¥–∂–µ—Ä—É —Ç—Ä–µ–±–∞ –Ω–∞–±—Ä–∞—Ç–∏' if order.manager else ''}\n"
                f"{order.created_at.strftime('%d.%m.%Y %H:%M')}"
            )
            await update.message.reply_text(message, parse_mode='HTML')


async def to_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from products.models import Order
    if await is_allowed_user(update.effective_user.id):
        for order in await sync_to_async(list)(Order.objects.filter(sent=False)):
            message = (
                f"<b>–ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order.id} '{order.product}'</b>\n\n"
                f"–Ü–º'—è: {order.name} {order.surname}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
                f"–í—ñ–¥—ñ–ª–µ–Ω–Ω—è: {order.address} {order.post}\n"
                f"–°—É–º–∞: {order.price} –≥—Ä–Ω\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
                f"{'‚≠ï –ú–µ–Ω–µ–¥–∂–µ—Ä—É —Ç—Ä–µ–±–∞ –Ω–∞–±—Ä–∞—Ç–∏' if order.manager else ''}\n"
                f"{order.created_at.strftime('%d.%m.%Y %H:%M')}"
            )
            await update.message.reply_text(message, parse_mode='HTML')


# –û–±—Ä–æ–±–ª—è—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text  # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await update.message.reply_text(f"–í–∏ —Å–∫–∞–∑–∞–ª–∏: {user_text}")
