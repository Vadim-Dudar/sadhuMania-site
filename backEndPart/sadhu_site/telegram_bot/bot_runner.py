import asyncio
import threading
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from telegram.error import Conflict
from .views import *
from telegram import Bot


async def send_order_notification(order):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø—Ä–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
    """
    from .secure import TELEGRAM_BOT_TOKEN
    from admin_panel.models import SystemUser as User
    from django.db.models import Q

    ADMIN_CHAT_IDS = await sync_to_async(list)(
        User.objects.filter(
            Q(access_level='admin') | Q(access_level='super')
        ).values_list('user_id', flat=True)
    )

    bot = Bot(token=TELEGRAM_BOT_TOKEN)  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –±–æ—Ç–∞
    message = (
        f"<b>üõí –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order.id} ‚Äî {order.product_id.name}</b>\n\n"
        f"<b>üë§ –ö–ª—ñ—î–Ω—Ç:</b>\n"
        f"–Ü–º'—è: <i>{order.customer_id.name} {order.customer_id.surname}</i>\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: <i>{order.customer_id.phone}</i>\n\n"
        f"<b>üöö –î–æ—Å—Ç–∞–≤–∫–∞:</b> <i>{order.address} #{order.post}</i>\n"
        f"<b>üí∞ –°—É–º–∞:</b> <i>{order.price} –≥—Ä–Ω</i>\n"
        f"{'üîî <b>–ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É!</b>' if order.status == 'should_call' else ''}\n"
        f"<b>üïí –ß–∞—Å:</b> {order.created_at.strftime('%d.%m.%Y %H:%M')}"
    )

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMIN_CHAT_IDS:
        try:
            await bot.send_message(chat_id=admin_id, text=message, parse_mode='HTML')
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")


async def error_handler(update, context):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É"""
    if isinstance(context.error, Conflict):
        print("Conflict detected. Ignoring old updates.")
    else:
        print(f"Unexpected error: {context.error}")


def run_bot(token):
    """–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –≤ —ñ–∑–æ–ª—å–æ–≤–∞–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""

    def bot_thread():
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π –ø–æ–¥—ñ—î–≤–∏–π —Ü–∏–∫–ª —É –ø–æ—Ç–æ—Ü—ñ
        asyncio.set_event_loop(asyncio.new_event_loop())
        loop = asyncio.get_event_loop()
        app = ApplicationBuilder().token(token).build()

        # –î–æ–¥–∞–π—Ç–µ –≤–∞—à—ñ –∫–æ–º–∞–Ω–¥–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.add_handler(CommandHandler("manager", manager))
        app.add_handler(CommandHandler("tosend", to_send))

        # –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
        app.add_error_handler(error_handler)

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling —ñ–∑ drop_pending_updates=True
        loop.run_until_complete(app.run_polling(drop_pending_updates=True))

    # –ó–∞–ø—É—Å–∫ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    thread = threading.Thread(target=bot_thread, daemon=True)
    thread.start()
